services:
  api-server:
    container_name: 'api-server'
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.api
      args:
        - INSTALL_PyPartMC=false
    ports:
      - 8000:8000
    env_file:
      - ./.env
    command: >
      sh -c "poetry run python3 interactive/manage.py makemigrations &&
             poetry run python3 interactive/manage.py migrate &&
             poetry run python3 interactive/manage.py collectstatic --noinput &&
             poetry run python3 interactive/manage.py runserver_plus 0.0.0.0:8000"
    volumes:
      - partmc-data:/music-box-interactive/interactive/partmc-volume
    depends_on:
      - postgres
  postgres:
    container_name: 'postgres'
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  model-runner:
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.model_runner
      args:
        - INSTALL_PyPartMC=false
    env_file:
      - ./.env
    depends_on:
      - rabbitmq
      - postgres
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 6
    command: ["poetry", "run", "python3", "/music-box-interactive/interactive/rabbit_mq_model_runner.py"]
    volumes:
      - partmc-data:/partmc/partmc-volume
  rabbitmq:
    container_name: 'rabbitmq'
    image: rabbitmq:3.11-management
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 10
volumes:
  partmc-data:
  postgres-data: